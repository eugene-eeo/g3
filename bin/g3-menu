#!/usr/bin/env python

from pathlib import Path
from os.path import join
import sys
import json


class Link:
    def __init__(self, target, text, path):
        self.target = target
        self.text = text
        self.path = path
        self.sub = []

    def to_html(self):
        a = "<a href='%s'>%s</a>" % (self.target, self.text)
        if not self.sub:
            return a
        g = [a, '<ul>']
        for l in sorted(self.sub, key=lambda l: l.text):
            g.append('<li>%s</li>' % l.to_html())
        g.append('</ul>')
        return '\n'.join(g)


def strip_tmp_ext(p):
    # strip the leading _g3/tmp from p
    p = p.parent / p.stem
    return Path(join(*p.parts[2:]))


def to_target(p):
    return '/' + str(p)


def files_to_link(p):
    for f in p.iterdir():
        if f.is_file() and f.match('*.header'):
            yield f.parent / f.stem, f.stem == 'index'

        if f.is_dir():
            yield f / 'index', False


def linkify_directory(p, prev):
    links = []
    root = None
    for path, is_index in files_to_link(p):
        if prev and path == prev.path:
            links.append(prev)
            continue
        link = Link(
            target=to_target(strip_tmp_ext(path)) + '.html',
            text=json.load(open(str(path) + '.header'))['title'],
            path=path,
            )
        if is_index:
            link.sub = links
            root = link
            continue
        links.append(link)
    return root


def main(path):
    path = Path(path)
    if path.suffix != '.md':
        return

    dst = Path('_g3/tmp') / (str(path.parent / path.stem) + '.menu')
    parts = [Path('_g3/tmp')] + list(path.parts[:-1])
    root = None

    for i in range(len(parts)):
        root = linkify_directory(
            Path.joinpath(*parts[:len(parts) - i]),
            root,
            )

    with dst.open('w') as f:
        f.write('' if root is None else root.to_html())


if __name__ == '__main__':
    main(sys.argv[1])
