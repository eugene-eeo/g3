#!/usr/bin/env python

from pathlib import Path
from os.path import join
import sys
import json


class Link:
    __slots__ = ('text', 'path', 'sub')

    def __init__(self, text, path, sub):
        self.text = text
        self.path = path
        self.sub = sub

    def to_html(self):
        a = "<a href='%s'>%s</a>" % (self.path, self.text)
        return a

    @classmethod
    def from_json(cls, data):
        return cls(
            text=data['text'],
            path=data['path'],
            sub=[cls.from_json(d) for d in data['sub']],
            )


class Menu:
    def __init__(self, link, sub_links):
        self.link = link
        self.sub_links = sub_links

    def chunks(self):
        yield self.link.to_html()
        if not self.sub_links:
            return
        yield "<ul>"
        for link in self.sub_links:
            yield "<li>%s</li>" % link.to_html()
        yield "</ul>"

    def to_html(self):
        return "\n".join(self.chunks())


def gen_menu(root, path, dst):
    menu = Menu(root, [])
    curr_menu = menu
    curr_root = root
    parts = path.parts[:-1]

    for i in range(len(parts)):
        next_menu = None
        next_root = None

        u = parts[:i+1] + ('index.html',)
        p = "/" + join(*u)
        for link in curr_root.sub:
            m = Menu(link, [])
            curr_menu.sub_links.append(m)
            if link.path == p:
                next_menu = m
                next_root = link
                break

        if next_menu is None:
            break
        curr_menu = next_menu
        curr_root = next_root

    curr_menu.sub_links = [Menu(l, []) for l in curr_root.sub]
    dst.write('' if root is None else menu.to_html())


def main():
    with open('_g3/tmp/title-index') as f:
        index = json.load(f)
        root = Link.from_json(index)

    if len(sys.argv) >= 2:
        gen_menu(root, Path(sys.argv[1]), sys.stdout)
        return

    for src in sys.stdin:
        src = src.rstrip('\n')
        src = Path(src)
        dst = Path('_g3/tmp') / (str(src.parent / src.stem) + '.menu')
        dst.parent.mkdir(parents=True, exist_ok=True)
        with dst.open('w') as w:
            gen_menu(root, src, w)


if __name__ == '__main__':
    main()
